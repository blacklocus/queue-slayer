apply plugin: 'idea'

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Defines

/** Function always returns a new manifest that can be customized */
def defaultManifest() {
    return manifest {
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        attributes 'SCM-Revision': git_proc.text.trim()
        attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
        attributes 'Build-Host': InetAddress.localHost.hostName
    }
}

def defaultBlank(closure) {
    try {
        closure()
    } catch (MissingPropertyException e) {
        ''
    }
}

ext {
    deps = [

            aws_java_sdk: 'com.amazonaws:aws-java-sdk:1.6.8',
            commons_configuration: 'commons-configuration:commons-configuration:1.10',
            commons_io: 'commons-io:commons-io:2.4',
            commons_lang3: 'org.apache.commons:commons-lang3:3.1',
            dropwizard_core: 'com.yammer.dropwizard:dropwizard-core:0.6.2',
            fauxflake_core: 'com.github.rholder.fauxflake:fauxflake-core:1.0.0',
            guava: 'com.google.guava:guava:15.0',
            jackson_databind: 'com.fasterxml.jackson.core:jackson-databind:2.3.0',
            jres: 'com.blacklocus:jres:0.1.8',
            jres_test: 'com.blacklocus:jres-test:0.1.4',
            junit: 'junit:junit:4.11',
            moar_concurrent: 'com.github.rholder:moar-concurrent:1.0.2',
            mockito_core: 'org.mockito:mockito-core:1.9.5',
            slf4j_api: 'org.slf4j:slf4j-api:1.7.5',
            slf4j_simple: 'org.slf4j:slf4j-simple:1.7.5',

    ]
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// License

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.5.0'
    }
}
allprojects {
    apply plugin: 'license'

    license {
        header rootProject.file('src/license/HEADER')
    }
}

subprojects {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Identifiers

    group = 'com.blacklocus.queue-slayer'
    version = '0.3.3'
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Plugins

    apply plugin: 'java'
    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'idea'

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Dependencies

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile deps.junit
    }

    configurations {
        // Make sure to use com.fasterxml.jackson.core
        all*.exclude group: 'org.codehaus.jackson'
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Artifacts

    jar {
        manifest = defaultManifest()
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
        manifest = defaultManifest()
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
        manifest = defaultManifest()
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Publishing

    assemble {
        dependsOn licenseFormatMain, licenseFormatTest
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories.mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            //# ./gradlew -PdeployUrl=http://server/artifactory/repo -PdeployUsername=admin -PdeployPassword=pass uploadArchives
            repository(
                    url: defaultBlank({ deployUrl })
                    // for snapshots
//                url: "https://oss.sonatype.org/content/repositories/snapshots/"
                    // for staging/release
//                url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            ) {
                // If these are not defined assemble needlessly fails for unrelated tasks.
                authentication(userName: defaultBlank({ deployUsername }), password: defaultBlank({ deployPassword }))
            }

            pom.project {
                name 'queue-slayer'
                description 'An in-jvm processing pattern for parallelized work off of a queue.'
                url 'https://github.com/blacklocus/queue-slayer'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                scm {
                    url 'https://github.com/blacklocus/queue-slayer.git'
                    connection 'scm:git:https://github.com/blacklocus/queue-slayer.git'
                    developerConnection 'scm:git:git@github.com:blacklocus/queue-slayer.git'
                }
                organization {
                    name 'BlackLocus'
                    url 'https://github.com/blacklocus'
                }
                developers {
                    developer {
                        id 'rholder'
                        name 'Ray Holder'
                    }
                    developer {
                        id 'dirkraft'
                        name 'Jason Dunkelberger'
                    }
                }
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Misc

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

idea {
    project {
        languageLevel = '1.6'
    }
}
